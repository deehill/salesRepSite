site22aa_menu_salesRepUserSystemActions_oct15_23.txt

supports the site22aa_layout_of_landingpage_based_on_github.dat

possibly use livesite as base app
	https://github.com/NadavShaar/landing-page-template
	https://nadavshaar.github.io/landing-page-template/#home

uses information/data from 
	referral_app_user_guide_oct1_23.txt
	 site22aa_layout_of_salesReplandingpage_based_on_github.dat
	 site22aa_salesReplandingApp_navBar_menu_oct15_23.txt --- has the layouts..

salesRep_masterViralRefActions_oct1_23.txt
-lst of landingPage_membership_community_viral_referral_admin functions

the "UserSystemActions" page for the "Home" menu item/link 

the following is the basic layout/wireframe/flow for the "UserSystemActions" page/link 
 when the user selects the "UserSystemActions" link from the main navBar
	-from the navBar, the user can select any of the other navBar menu/link items
	-user can also select the "upper right" login/registration/passwd items
		app logic will handle user based on user login status..



**User -(System Actions)
	Home	UserRoles	User -(System Actions)	Rewards/Referral(Actions)	SiteData	PartnerSites	AboutUs		SiteGuide (How To:)
						  changeUserData (name/college/etc..)
						  JoinWaitlist	(in userTBL) 




user selects the "User -(System Actions" link/menuItem
 app displays the child links for the "different" types of "user system actions" for the site
	-"changeUserData"	-logged in user able to change its' own userDataTBL/items
	-"JoinWaitlist" 	-logged in user able to "join" the WaitList, via the userTBL/form


 only loggedIn users have access to invoke the systemActions
 process uses sysVar to track loggedIn state
 process "greys" out link to non-loggedIn user
	shows "regular" link to loggedIn user

each link displays a section/content with basic explanation for the action/process, 
 and the "form/process" to handle the action/submit


 points the user to the "SiteGuide" menu item/link for more information about the 
	User-System Action processes

for users not logged in, process might display/guide user to login, in order to 
 changeData/JoinWaitList..


::changeUserData
	selecting 'changeUserData' allows user to change most of the elements 
	 within the userDataTBL/Form
	-app displays new/updated section using clientside javascript to mod the 
		client/frontside DOM
		changing "data" on the client/front with "submit" invokes ajax/async 
		 processes to send/fetch data between front/srvr.
		html changes occur on client/front with data from back
		faster process
		-uses base javascript or javascript libs...
	-decide if the action creates different page, or different space/area within 
		the current page

		 user completes the userDataFomr/items

		/*
			UserDataForm items::--
			userName
			userAddress/city
			userCollege( -one or more)
			do you want to "refer"
			how much are textbooks
			do you pay
			who pays
			do you want cheaper textbooks
			where do you get your textbooks
			do you use custom materials for classes
			does your school bundle cost of textbooks with tuition
			would you use cheaper books instead of bundling
			do you get online/delivered items (amazon/etsy/etc..)
			would you be good with getting your books from a fedex/ups 
			 location to reduce porch pirate/theft
			do you do social media

		where do you get your textbooks
		would you be more inclined to do business with 
		 local companies that help lower your tetbook cost
		would you be willing to refer other user to sign up to 
		 try out this site
		what city/college
		do you do social media
		Would you be more likely to use companies that helped support 
		 cheaper books
		What kind of buisnesses would you be inclined to want to see ads 
		 from
		--etc/more fields in the userData form/dialogue
			*/

		 frontside validates/checks userDataForm items
		 	if valid, sends the userDatajson/packet to serverside for processing
			 -generates the "post" queryStr/json/urlencrypt

			serverside -userDataAction
			 -gets the unique post from frontside
			 -validates the postQuery
				-ensures the postQuery is "domain" bound
				-ensures data is valid
					invalid, returns err to frontside
					valid:
						decouples input data/packet
						gets email/userData --inserts data into tbl
						returns "userDataAddedSuccess" to frontside...

		 	if invalid, generate/display "invalid userData -- resubmit"
				don't send invalid userDataPostQuery to serverside


			-this is "displayed when user selects 'SignUp/Join" 
			 from the menu



::JoinWaitlist
	selecting 'JoinWaitlist' allows user to change the "JoinWaitlist" attribute of the 
	 element within the userDataTBL/Form
	-app displays new/updated section using clientside javascript to mod the 
		client/frontside DOM
		changing "data" on the client/front with "submit" invokes ajax/async 
		 processes to send/fetch data between front/srvr.
		html changes occur on client/front with data from back
		faster process
		-uses base javascript or javascript libs...
	-decide if the action creates different page, or different space/area within 
		the current page

the "page"/layout of the page for this section/menuItem still has the main navBar, allowing the 
	user to then select the given menuItem from the main navBar

			 In order to make the Cheap Textbook Platform work, the project needs to 
				know who wants to help the project grow and to test the project. To do 
				this, we need to have your email, as well as some information about 
				you via the UserData Form (below).

				For users who want join the platform, and be part of getting Cheaper 
				 Textbooks, and engaging with the Advertizers, we ask that you 
				 sign up with your EmailAddress.

				We also ask that you provide, some information on you so initial 
				 advertisers can have a better understanding of potential users of 
				 the platform. (Filling out the UserData form isn't required to be 
				 in line for the cheap books platform, but it helps the platform 
				 happen for others!)
			  
			EmailAddress::
			so have 2 sections under 
			 user who want to submit their email for testing/cheap books

			display clearly
			 --use highlighted/grey dialog
			 I) -- this submit dialog.. user wants to get cheaper textbooks 
					doesn't want to refer other users...
			 II) -- this submit dialog.. user wants to get cheaper textbooks 
					wants to help grow the chance of this working by refering other users...

			user selects the btn to signs up/submits email to refer other users
			 user enters "emailAddrs"
			 frontside validates/checks email
			 	if valid, sends the email to serverside for processing
				 -generates the "post" queryStr/json/urlencrypt

				serverside -emailAction
				 -gets the unique post from frontside
				 -validates the postQuery
					-ensures the postQuery is "domain" bound
					-ensures data is valid
						invalid, returns err to frontside
						valid:
							decouples input data/packet
							gets email/inserts email into tbl
							creates confirm emailMsg
							builds landingPageURL to be included in emailMsg for 
							 user to be able to send to the referred friends
							 -the URL includes a unique referrerID
							 -ex http://foo.com/?referrerID=ABC
							when user submits/clicks on the link, user goes to the 
							 landingpage site, where the referrerID is set as a sessionVar 
							 to match/add the user to the "parent" user's list/count of 
							 referred users

							for the "parentUser", is a confirmed email when a friend/child clicks 
							 on the landingPageURL_referrerID and the app detects the referrerID
								or, does the friend/user need to "submit their email?
							-app only counts a referrerID once, no duplicates

							serverside returns "valid" email/with referrerID

			 	if invalid, generate/display "invalid email format -- resubmit"
					don't send invalid emailPost to erverside


			or /user selects the btn to sign up/submits email without refering other users
			 user enters "emailAddrs"
			 frontside validates/checks email
			 	if valid, sends the email to serverside for processing
				 -generates the "post" queryStr/json/urlencrypt

				serverside -emailAction
				 -gets the unique post from frontside
				 -validates the postQuery
					-ensures the postQuery is "domain" bound
					-ensures data is valid
						invalid, returns err to frontside
						valid:
							decouples input data/packet
							gets email/inserts email into tbl
							creates confirm emailMsg
								-no referrerID/url is created/inserted into the 
								 confirm email, even though the user/tbl/app has 
								 created one for the user
								---user can change the "refererID" attribute to 
									be able to "recruit" or give the referrerID 
									to others.

			 	if invalid, generate/display "invalid email format -- resubmit"
					don't send invalid emailPost to serverside






